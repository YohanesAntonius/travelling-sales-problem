"""Simple travelling salesman problem between cities."""

from __future__ import print_function
from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp



def create_data_model():
    """Stores the data for the problem."""
    data = {}
    data['distance_matrix'] = [
        [22, 49.88, 3.22, 36.95, 6.65, 6.16, 29.69, 8.1, 21.78, 50.66, 4.07, 46.49, 52.56, 2.72, 10.42, 53.87, 12.53, 53.08, 55.35, 32.58, 36.98, 51.36, 39.47, 0.14, 55.45, 47.57],
        [47.57, 49.88, 3.22, 36.95, 6.65, 6.16, 29.69, 8.1, 21.78, 50.66, 4.07, 46.49, 52.56, 2.72, 10.42, 53.87, 12.53, 53.08, 55.35, 32.58, 36.98, 51.36, 39.47, 0.14, 55.45, 22],
        [22, 55.45, 3.22, 36.95, 6.65, 6.16, 29.69, 8.1, 21.78, 50.66, 4.07, 46.49, 52.56, 2.72, 10.42, 53.87, 12.53, 53.08, 55.35, 32.58, 36.98, 51.36, 39.47, 0.14, 49.88, 47.57],
        [22, 49.88, 0.14, 36.95, 6.65, 6.16, 29.69, 8.1, 21.78, 50.66, 4.07, 46.49, 52.56, 2.72, 10.42, 53.87, 12.53, 53.08, 55.35, 32.58, 36.98, 51.36, 39.47, 3.22, 55.45, 47.57],
        [22, 49.88, 3.22, 39.47, 6.65, 6.16, 29.69, 8.1, 21.78, 50.66, 4.07, 46.49, 52.56, 2.72, 10.42, 53.87, 12.53, 53.08, 55.35, 32.58, 36.98, 51.36, 36.95, 0.14, 55.45, 47.57],
        [22, 49.88, 3.22, 36.95, 51.36, 6.16, 29.69, 8.1, 21.78, 50.66, 4.07, 46.49, 52.56, 2.72, 10.42, 53.87, 12.53, 53.08, 55.35, 32.58, 36.98, 6.65, 39.47, 0.14, 55.45, 47.57],
        [22, 49.88, 3.22, 36.95, 6.65, 36.98, 29.69, 8.1, 21.78, 50.66, 4.07, 46.49, 52.56, 2.72, 10.42, 53.87, 12.53, 53.08, 55.35, 32.58, 6.16, 51.36, 39.47, 0.14, 55.45, 47.57],
        [22, 49.88, 3.22, 36.95, 6.65, 6.16, 32.58, 8.1, 21.78, 50.66, 4.07, 46.49, 52.56, 2.72, 10.42, 53.87, 12.53, 53.08, 55.35, 29.69, 36.98, 51.36, 39.47, 0.14, 55.45, 47.57],
        [22, 49.88, 3.22, 36.95, 6.65, 6.16, 29.69, 55.35, 21.78, 50.66, 4.07, 46.49, 52.56, 2.72, 10.42, 53.87, 12.53, 53.08, 8.1, 32.58, 36.98, 51.36, 39.47, 0.14, 55.45, 47.57],
        [22, 49.88, 3.22, 36.95, 6.65, 6.16, 29.69, 8.1, 53.08, 50.66, 4.07, 46.49, 52.56, 2.72, 10.42, 53.87, 12.53, 21.78, 55.35, 32.58, 36.98, 51.36, 39.47, 0.14, 55.45, 47.57],
	    [22, 49.88, 3.22, 36.95, 6.65, 6.16, 29.69, 8.1, 21.78, 12.53, 4.07, 46.49, 52.56, 2.72, 10.42, 53.87, 50.66, 53.08, 55.35, 32.58, 36.98, 51.36, 39.47, 0.14, 55.45, 47.57],
        [22, 49.88, 3.22, 36.95, 6.65, 6.16, 29.69, 8.1, 21.78, 50.66, 53.87, 46.49, 52.56, 2.72, 10.42, 4.07, 12.53, 53.08, 55.35, 32.58, 36.98, 51.36, 39.47, 0.14, 55.45, 47.57],
        [22, 49.88, 3.22, 36.95, 6.65, 6.16, 29.69, 8.1, 21.78, 50.66, 4.07, 10.42, 52.56, 2.72, 46.49, 53.87, 12.53, 53.08, 55.35, 32.58, 36.98, 51.36, 39.47, 0.14, 55.45, 47.57],

        [14.25, 50.56, 49.62, 5.26, 51.99, 11.98, 38.47, 22.27, 7.63, 1.76, 27.76, 30.79, 2.69, 20.35, 21.75, 12.16, 40.09, 37.08, 29.15, 44.77, 27.46, 18.56, 34.63, 47.6, 33.63, 3.05],
        [3.05, 33.63, 49.62, 5.26, 51.99, 11.98, 38.47, 22.27, 7.63, 1.76, 27.76, 30.79, 2.69, 20.35, 21.75, 12.16, 40.09, 37.08, 29.15, 44.77, 27.46, 18.56, 34.63, 47.6, 50.56, 14.25],
        [3.05, 50.56, 47.6, 5.26, 51.99, 11.98, 38.47, 22.27, 7.63, 1.76, 27.76, 30.79, 2.69, 20.35, 21.75, 12.16, 40.09, 37.08, 29.15, 44.77, 27.46, 18.56, 34.63, 49.62, 33.63, 14.25],
        [3.05, 50.56, 49.62, 34.63, 51.99, 11.98, 38.47, 22.27, 7.63, 1.76, 27.76, 30.79, 2.69, 20.35, 21.75, 12.16, 40.09, 37.08, 29.15, 44.77, 27.46, 18.56, 5.26, 47.6, 33.63, 14.25],
        [3.05, 50.56, 49.62, 5.26, 18.56, 11.98, 38.47, 22.27, 7.63, 1.76, 27.76, 30.79, 2.69, 20.35, 21.75, 12.16, 40.09, 37.08, 29.15, 44.77, 27.46, 51.99, 34.63, 47.6, 33.63, 14.25],
        [3.05, 50.56, 49.62, 5.26, 51.99, 27.46, 38.47, 22.27, 7.63, 1.76, 27.76, 30.79, 2.69, 20.35, 21.75, 12.16, 40.09, 37.08, 29.15, 44.77, 11.98, 18.56, 34.63, 47.6, 33.63, 14.25],
        [3.05, 50.56, 49.62, 5.26, 51.99, 11.98, 44.77, 22.27, 7.63, 1.76, 27.76, 30.79, 2.69, 20.35, 21.75, 12.16, 40.09, 37.08, 29.15, 38.47, 27.46, 18.56, 34.63, 47.6, 33.63, 14.25],
        [3.05, 50.56, 49.62, 5.26, 51.99, 11.98, 38.47, 29.15, 7.63, 1.76, 27.76, 30.79, 2.69, 20.35, 21.75, 12.16, 40.09, 37.08, 22.27, 44.77, 27.46, 18.56, 34.63, 47.6, 33.63, 14.25],
        [3.05, 50.56, 49.62, 5.26, 51.99, 11.98, 38.47, 22.27, 37.08, 1.76, 27.76, 30.79, 2.69, 20.35, 21.75, 12.16, 40.09, 7.63, 29.15, 44.77, 27.46, 18.56, 34.63, 47.6, 33.63, 14.25],
        [3.05, 50.56, 49.62, 5.26, 51.99, 11.98, 38.47, 22.27, 7.63, 40.09, 27.76, 30.79, 2.69, 20.35, 21.75, 12.16, 1.76, 37.08, 29.15, 44.77, 27.46, 18.56, 34.63, 47.6, 33.63, 14.25],
        [3.05, 50.56, 49.62, 5.26, 51.99, 11.98, 38.47, 22.27, 7.63, 1.76, 12.16, 30.79, 2.69, 20.35, 21.75, 27.76, 40.09, 37.08, 29.15, 44.77, 27.46, 18.56, 34.63, 47.6, 33.63, 14.25],
        [3.05, 50.56, 49.62, 5.26, 51.99, 11.98, 38.47, 22.27, 7.63, 1.76, 27.76, 21.75, 2.69, 20.35, 30.79, 12.16, 40.09, 37.08, 29.15, 44.77, 27.46, 18.56, 34.63, 47.6, 33.63, 14.25],
        [3.05, 50.56, 49.62, 5.26, 51.99, 11.98, 38.47, 22.27, 7.63, 1.76, 27.76, 30.79, 20.35, 2.69, 21.75, 12.16, 40.09, 37.08, 29.15, 44.77, 27.46, 18.56, 34.63, 47.6, 33.63, 14.25],
    ]  # yapf: disable
    data['num_vehicles'] = 5
    data['depot'] = 0
    return data


def print_solution(manager, routing, solution):
    """Prints solution on console."""
    print('Objective: {} miles'.format(solution.ObjectiveValue()))
    index = routing.Start(0)
    plan_output = 'Route for vehicle 0:\n'
    route_distance = 0
    while not routing.IsEnd(index):
        plan_output += ' {} ->'.format(manager.IndexToNode(index))
        previous_index = index
        index = solution.Value(routing.NextVar(index))
        route_distance += routing.GetArcCostForVehicle(previous_index, index, 0)
    plan_output += ' {}\n'.format(manager.IndexToNode(index))
    print(plan_output)
    plan_output += 'Route distance: {}miles\n'.format(route_distance)


def main():
    """Entry point of the program."""
    # Instantiate the data problem.
    data = create_data_model()

    # Create the routing index manager.
    manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']),
                                           data['num_vehicles'], data['depot'])

    # Create Routing Model.
    routing = pywrapcp.RoutingModel(manager)


    def distance_callback(from_index, to_index):
        """Returns the distance between the two nodes."""
        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['distance_matrix'][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)

    # Define cost of each arc.
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # Setting first solution heuristic.
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)

    # Solve the problem.
    solution = routing.SolveWithParameters(search_parameters)

    # Print solution on console.
    if solution:
        print_solution(manager, routing, solution)


if __name__ == '__main__':
    main()